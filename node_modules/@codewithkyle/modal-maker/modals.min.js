var ModalMaker=(()=>{var __defProp=Object.defineProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true})};var modals_exports={};__export(modals_exports,{confirm:()=>confirm,form:()=>form,passive:()=>passive,raw:()=>raw});var noop=()=>{};var Modal=class extends HTMLElement{constructor(rejectCallback=noop){super();this.close=()=>{this.reject();this.remove()};this.reject=rejectCallback}connected(){}connectedCallback(){this.closeButton=this.querySelector(".close");this.closeButton.addEventListener("click",this.close);document.activeElement.blur();this.closeButton.focus();this.backdrop=this.querySelector(".backdrop");this.backdrop.addEventListener("click",this.close);this.connected()}};var ConfirmModal=class extends Modal{constructor(settings,resolve,reject){super(reject);this.confirm=()=>{this.resolve();this.remove()};this.cancel=()=>{this.reject();this.remove()};this.settings=settings;this.resolve=resolve;this.render()}render(){this.className=this.settings.className;this.innerHTML=`
			<div class="backdrop"></div>
			<div class="modal" size="${this.settings.size}">
				<h1>${this.settings.heading}</h1>
				<p>${this.settings.message}</p>
				<div class="actions">
					<button class="cancel">
						${this.settings.rejectLabel}
					</button>
					<button class="confirm ${this.settings.dangerous?"danger":""}">
						${this.settings.confirmLabel}
					</button>
				</div>
				<button class="close" aria-label="close modal">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</div>
		`}connected(){this.confirmButton=this.querySelector(".confirm");this.confirmButton.addEventListener("click",this.confirm);this.cancelButton=this.querySelector(".cancel");this.cancelButton.addEventListener("click",this.cancel)}};var FormModal=class extends Modal{constructor(settings,resolve,reject){super(reject);this.submit=e=>{e.preventDefault();if(this.settings.form.checkValidity()){this.resolve(new FormData(this.settings.form));this.remove()}else{this.settings.form.reportValidity()}};this.settings=settings;this.resolve=resolve;this.render()}render(){this.className=this.settings.className;this.innerHTML=`
			<div class="backdrop"></div>
			<div class="modal" size="${this.settings.size}">
				${this.settings.heading?.length?`<h1>${this.settings.heading}</h1>`:""}
				${this.settings.message?.length?`<p>${this.settings.message}</p>`:""}
				<div class="form"></div>
				<button class="close" aria-label="close modal">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</div>
		`}connected(){if(this.settings.form instanceof HTMLFormElement){this.form=this.querySelector(".form");this.form.appendChild(this.settings.form);this.settings.form.addEventListener("submit",this.submit)}}};var PassiveModal=class extends Modal{constructor(settings){super();this.settings=settings;this.render()}render(){this.className=this.settings.className;this.innerHTML=`
			<div class="backdrop"></div>
			<div class="modal" size="${this.settings.size}">
				<h1>${this.settings.heading}</h1>
				<p>${this.settings.message}</p>
				<button class="close" aria-label="close modal">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</div>
		`}};var RawModal=class extends Modal{constructor(settings){super();this.settings=settings;this.render()}render(){this.className=this.settings.className;this.innerHTML=`
			<div class="backdrop"></div>
			<div class="modal" size="${this.settings.size}">
				${this.settings.heading?.length?`<h1>${this.settings.heading}</h1>`:""}
				${this.settings.message?.length?`<p>${this.settings.message}</p>`:""}
				<div class="container">
					${this.settings.el instanceof HTMLElement?"":this.settings.el}
				</div>
				<button class="close" aria-label="close modal">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
					</svg>
				</button>
			</div>
		`}connected(){if(this.settings.el instanceof HTMLElement){const container=this.querySelector(".container");container.appendChild(this.settings.el)}}};var ModalMaker=class{constructor(){this.modal=null}launch(el){if(this.modal?.isConnected){this.modal.reject();this.modal.remove()}this.modal=el;document.body.appendChild(this.modal)}passive(settings){const config=Object.assign({className:"",heading:"Heading",message:"Passive modals require a message.",size:"small"},settings);this.launch(new PassiveModal(config))}confirm(settings){return new Promise((resolve,reject)=>{const config=Object.assign({className:"",heading:"Heading",message:"Confirm modals require a message.",size:"small",confirmLabel:"Confirm",rejectLabel:"Cancel",dangerous:false},settings);this.launch(new ConfirmModal(config,resolve,reject))})}form(settings){return new Promise((resolve,reject)=>{const config=Object.assign({className:"",heading:null,message:null,size:"medium",form:null},settings);this.launch(new FormModal(config,resolve,reject))})}raw(settings){const config=Object.assign({className:"",heading:null,message:null,size:"large",el:null},settings);this.launch(new RawModal(config))}};var globalModalMaker=new ModalMaker;var passive=globalModalMaker.passive.bind(globalModalMaker);var confirm=globalModalMaker.confirm.bind(globalModalMaker);var form=globalModalMaker.form.bind(globalModalMaker);var raw=globalModalMaker.raw.bind(globalModalMaker);customElements.define("passive-modal",PassiveModal);customElements.define("confirm-modal",ConfirmModal);customElements.define("form-modal",FormModal);customElements.define("raw-modal",RawModal);return modals_exports;})();
